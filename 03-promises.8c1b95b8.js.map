{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACeC,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALI,MAAOC,EAAIL,EAAJK,KAAMC,EAAMN,EAANM,OAGrBC,EAAaC,OAAOL,EAAMM,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAOH,OAAOF,EAAOG,OAE3BG,QAAQC,IAAI,sBAEZ,IACIC,EAAQP,EACRQ,EAAS,EAEbC,YAAW,WACTC,aAAY,WAeV,GAAIF,EAASJ,EACX,OAAOO,cArBG,GAMZ,IAAuBC,EAAUf,GAAVe,EAkBTJ,EAlBmBX,EAkBXU,EAjBpBF,QAAQC,IAAIC,GACZA,GAASJ,EACTE,QAAQC,IAAIE,GACZA,GAAU,EACH,IAAIK,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAEpCH,EAAQ,CAAEF,WAAUf,UAEpBkB,EAAO,CAAEH,WAAUf,cAStBqB,MAAK,SAAAC,G,IAAGP,EAAQO,EAARP,SAAUf,EAAKsB,EAALtB,MACjBQ,QAAQC,IAAI,uBAAwCc,OAAfR,EAAS,QAAYQ,OAANvB,EAAM,OAC1DX,EAAAmC,OAAOC,QAAQ,qBAAoCF,OAAfR,EAAS,QAAYQ,OAANvB,EAAM,MAAK,CAC5D0B,QAAS,SAGZC,OAAM,SAAAL,G,IAAGP,EAAQO,EAARP,SAAUf,EAAKsB,EAALtB,MAClBQ,QAAQC,IAAI,sBAAqCc,OAAfR,EAAS,QAAYQ,OAANvB,EAAM,OACvDX,EAAAmC,OAAOI,QAAQ,oBAAmCL,OAAfR,EAAS,QAAYQ,OAANvB,EAAM,MAAK,CAC3D0B,QAAS,WAGdpB,KACFH,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n  const form = document.querySelector(\".form\");\n\n  form.addEventListener(\"submit\", handleSubmit);\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const {\n      elements: { delay, step, amount },\n    } = event.currentTarget;\n\n    const firstDelay = Number(delay.value);\n    const delayStep = Number(step.value);\n    const iter = Number(amount.value);\n\n    console.log('Button was clicked');\n\n    const timerId = 0;\n    let steps = firstDelay;\n    let number = 1;\n\n    setTimeout(() => {\n      setInterval(() => {\n        function createPromise(position, delay) {\n          console.log(steps);\n          steps += delayStep;\n          console.log(number);\n          number += 1;\n          return new Promise((resolve, reject) => {\n            const shouldResolve = Math.random() > 0.3;\n            if (shouldResolve) {\n              resolve({ position, delay });\n            } else {\n              reject({ position, delay });\n            }\n          });\n        }\n        if (number > iter) {\n          return clearInterval(timerId);\n        }\n\n        createPromise(number, steps)\n          .then(({ position, delay }) => {\n            console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n            Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n              timeout: 6000,\n            });\n          })\n          .catch(({ position, delay }) => {\n            console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n            Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n              timeout: 6000,\n            });\n          });\n      }, delayStep);\n    }, firstDelay);\n  }\n\n"],"names":["$h6c0i","parcelRequire","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","delay","step","amount","firstDelay","Number","value","delayStep","iter","console","log","steps","number","setTimeout","setInterval","clearInterval","position","Promise","resolve","reject","Math","random","then","param","concat","Notify","success","timeout","catch","failure"],"version":3,"file":"03-promises.8c1b95b8.js.map"}